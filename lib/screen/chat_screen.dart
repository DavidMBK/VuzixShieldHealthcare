// lib/screens/chat_screen.dart

import 'dart:async';
import 'package:flutter/material.dart';
import '../services/realtime_speech_service.dart';
import '../services/speech_handler.dart';
import '../models/medical_data_model.dart';
import '../widgets/patient_info_card.dart';
import '../widgets/blood_test_card.dart';
import '../widgets/prescription_card.dart';
import '../widgets/medical_history_card.dart';
import '../widgets/ai_response_widget.dart';
import '../utils/app_styles.dart';
import '../config/confing.dart';

/// Main chat screen for the medical assistant application.
/// Handles real-time speech recognition, displays patient information,
/// and shows AI-generated questions and responses.
class ChatScreen extends StatefulWidget {
  const ChatScreen({super.key});

  @override
  State<ChatScreen> createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> with TickerProviderStateMixin {
  // Service for managing WebSocket connection and speech transcription
  late final RealtimeSpeechService _speechService;
  
  // Handler for audio recording and Voice Activity Detection (VAD)
  late final VADAudioHandler _audioHandler;
  
  // Subscription to message stream from speech service
  StreamSubscription? _messageSubscription;

  // Flag indicating if the server is currently processing audio
  bool _isProcessingOnServer = false;

  // Latest question generated by the AI
  String _lastAIQuestion = "";
  
  // Patient information collected during conversation
  String _patientName = "";
  String _patientAge = "";
  String _patientProblem = "";

  // Medical data retrieved from database
  MedicalData? _medicalData;

  // Animation controller for pulsing effect during server processing
  late AnimationController _pulseController;
  late Animation<double> _pulseAnimation;

  @override
  void initState() {
    super.initState();
    
    // Initialize speech service with server IP
    _speechService = RealtimeSpeechService(SERVER_IP);
    
    // Initialize audio handler with callbacks
    _audioHandler = VADAudioHandler(
      onAudioData: _speechService.sendAudio,
      onSpeechEnd: _speechService.sendEndSignal,
      speechService: _speechService,
    );

    // Setup animation controller for processing indicator
    _pulseController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );

    // Define pulsing animation from 60% to 100% scale
    _pulseAnimation = Tween<double>(begin: 0.6, end: 1.0).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );

    // Subscribe to incoming messages from server
    _subscribeToMessages();
    
    // Start audio handler before establishing WebSocket connection
    _audioHandler.start().then((_) {
      _speechService.connect();
    });
  }

  /// Subscribes to the message stream from the speech service
  /// and handles different message types (transcripts, responses, errors)
  void _subscribeToMessages() {
    _messageSubscription = _speechService.messages.listen((message) {
      if (!mounted) return;

      setState(() {
        // Handle final transcript message - start processing animation
        if (message is FinalTranscript) {
          _isProcessingOnServer = true;
          _pulseController.repeat(reverse: true);
        } 
        // Handle final response from AI
        else if (message is FinalResponse) {
          _isProcessingOnServer = false;
          _pulseController.stop();

          // Update AI question
          _lastAIQuestion = message.clarifyingQuestion;

          // Update patient information if provided
          if (message.name.isNotEmpty) _patientName = message.name;
          if (message.age.isNotEmpty) _patientAge = message.age;
          if (message.problemSummary.isNotEmpty) {
            _patientProblem = message.problemSummary;
          }

          // Update medical data from database if available
          if (message.medicalData != null) {
            _medicalData = MedicalData.fromJson(message.medicalData!);
          }
        } 
        // Handle server error
        else if (message is ServerError) {
          _isProcessingOnServer = false;
          _pulseController.stop();
          _lastAIQuestion = "Error: ${message.message}";
        }
      });
    });
  }

  @override
  void dispose() {
    // Cancel message subscription
    _messageSubscription?.cancel();
    
    // Dispose services and controllers
    _speechService.dispose();
    _audioHandler.dispose();
    _pulseController.dispose();
    
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: MediaQuery.removePadding(
        context: context,
        removeTop: true,
        removeBottom: true,
        removeLeft: true,
        removeRight: true,
        child: Stack(
          children: [
            // AI question widget positioned at bottom left
            if (_lastAIQuestion.isNotEmpty)
              Positioned(
                bottom: 20,
                left: 20,
                width: 340,
                child: AIResponseWidget(
                  question: _lastAIQuestion, 
                  response: ''
                ),
              ),

            // Patient information panel positioned on the right side
            if (_patientName.isNotEmpty)
              Positioned(
                top: 20,
                right: 20,
                bottom: 20,
                width: 300,
                child: SingleChildScrollView(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: [
                      // Patient basic information card
                      PatientInfoCard(
                        name: _patientName,
                        age: _patientAge,
                        problem: _patientProblem,
                        patientInfo: _medicalData?.patientInfo,
                      ),

                      // Blood test results card (if available)
                      if (_medicalData?.bloodTests.isNotEmpty ?? false) ...[
                        const SizedBox(height: 12),
                        BloodTestCard(bloodTests: _medicalData!.bloodTests),
                      ],

                      // Prescriptions card (if available)
                      if (_medicalData?.prescriptions.isNotEmpty ?? false) ...[
                        const SizedBox(height: 12),
                        PrescriptionCard(
                          prescriptions: _medicalData!.prescriptions
                        ),
                      ],

                      // Medical history card (if available)
                      if (_medicalData?.medicalHistory.isNotEmpty ?? false) ...[
                        const SizedBox(height: 12),
                        MedicalHistoryCard(
                          history: _medicalData!.medicalHistory,
                          historyItems: [],
                        ),
                      ],
                    ],
                  ),
                ),
              ),

            // Processing indicator displayed in center during server processing
            if (_isProcessingOnServer)
              Center(
                child: AnimatedBuilder(
                  animation: _pulseAnimation,
                  builder: (context, child) {
                    return Transform.scale(
                      scale: _pulseAnimation.value,
                      child: Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: Colors.black.withOpacity(0.5),
                          shape: BoxShape.circle,
                        ),
                        child: const Icon(
                          Icons.psychology,
                          color: AppStyles.aiColor,
                          size: 32,
                        ),
                      ),
                    );
                  },
                ),
              ),
          ],
        ),
      ),
    );
  }
}
